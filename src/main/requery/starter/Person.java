// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package starter;

import io.requery.Persistable;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.QueryAttribute;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import starter.requery.model.AbstractPerson;

import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class Person extends AbstractPerson implements Persistable {
    public static final QueryAttribute<Person, Integer> ID = 
    new AttributeBuilder<Person, Integer>("id", int.class)
    .setProperty(new IntProperty<Person>() {
        @Override
        public Integer get(Person entity) {
            return entity.id;
        }

        @Override
        public void set(Person entity, Integer value) {
            entity.id = value;
        }

        @Override
        public int getInt(Person entity) {
            return entity.id;
        }

        @Override
        public void setInt(Person entity, int value) {
            entity.id = value;
        }
    })
    .setPropertyName("id")
    .setPropertyState(new Property<Person, PropertyState>() {
        @Override
        public PropertyState get(Person entity) {
            return entity.$id_state;
        }

        @Override
        public void set(Person entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Person, String> NAME = 
    new AttributeBuilder<Person, String>("name", String.class)
    .setProperty(new Property<Person, String>() {
        @Override
        public String get(Person entity) {
            return entity.name;
        }

        @Override
        public void set(Person entity, String value) {
            entity.name = value;
        }
    })
    .setPropertyName("name")
    .setPropertyState(new Property<Person, PropertyState>() {
        @Override
        public PropertyState get(Person entity) {
            return entity.$name_state;
        }

        @Override
        public void set(Person entity, PropertyState value) {
            entity.$name_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Person, String> EMAIL = 
    new AttributeBuilder<Person, String>("email", String.class)
    .setProperty(new Property<Person, String>() {
        @Override
        public String get(Person entity) {
            return entity.email;
        }

        @Override
        public void set(Person entity, String value) {
            entity.email = value;
        }
    })
    .setPropertyName("email")
    .setPropertyState(new Property<Person, PropertyState>() {
        @Override
        public PropertyState get(Person entity) {
            return entity.$email_state;
        }

        @Override
        public void set(Person entity, PropertyState value) {
            entity.$email_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<Person, Integer> AGE = 
    new AttributeBuilder<Person, Integer>("age", int.class)
    .setProperty(new IntProperty<Person>() {
        @Override
        public Integer get(Person entity) {
            return entity.age;
        }

        @Override
        public void set(Person entity, Integer value) {
            entity.age = value;
        }

        @Override
        public int getInt(Person entity) {
            return entity.age;
        }

        @Override
        public void setInt(Person entity, int value) {
            entity.age = value;
        }
    })
    .setPropertyName("age")
    .setPropertyState(new Property<Person, PropertyState>() {
        @Override
        public PropertyState get(Person entity) {
            return entity.$age_state;
        }

        @Override
        public void set(Person entity, PropertyState value) {
            entity.$age_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final Type<Person> $TYPE = new TypeBuilder<Person>(Person.class, "Person")
    .setBaseType(AbstractPerson.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setView(false)
    .setFactory(new Supplier<Person>() {
        @Override
        public Person get() {
            return new Person();
        }
    })
    .setProxyProvider(new Function<Person, EntityProxy<Person>>() {
        @Override
        public EntityProxy<Person> apply(Person entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(ID)
    .addAttribute(EMAIL)
    .addAttribute(NAME)
    .addAttribute(AGE)
    .build();

    private PropertyState $id_state;

    private PropertyState $name_state;

    private PropertyState $email_state;

    private PropertyState $age_state;

    private final transient EntityProxy<Person> $proxy = new EntityProxy<Person>(this, $TYPE);

    public Person() {
    }

    public int getId() {
        return $proxy.get(ID);
    }

    public String getName() {
        return $proxy.get(NAME);
    }

    public void setName(String name) {
        $proxy.set(NAME, name);
    }

    public String getEmail() {
        return $proxy.get(EMAIL);
    }

    public void setEmail(String email) {
        $proxy.set(EMAIL, email);
    }

    public int getAge() {
        return $proxy.get(AGE);
    }

    public void setAge(int age) {
        $proxy.set(AGE, age);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof Person && ((Person)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
